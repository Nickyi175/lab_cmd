package lab_cmd;
import java.io.*;
import java.util.Calendar;

public class commandFrame1 extends javax.swing.JFrame {

    private Calendar fecha;
    CMDFunciones cmd;

    public commandFrame1() {
        initComponents();
        fecha = Calendar.getInstance();
        cmd = new CMDFunciones("");
        console.setText("" + fecha.getTime() + "\n\n" + cmd.getCurrentPath() + ">");
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        console.setEditable(false);
        console.setBackground(new java.awt.Color(0, 0, 0));
        console.setColumns(20);
        console.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        console.setForeground(new java.awt.Color(255, 255, 255));
        console.setLineWrap(true);
        console.setRows(5);
        console.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consoleKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(console);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Consola de comandos CMD");
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void print(String msg) {
        String newText = console.getText();
        newText += "\n" + msg;
        console.setText(newText);
    }

    private String parse() {
        String lineNormal = "";
        String lineReverse = "";
        String consoleText = console.getText();

        for (int i = consoleText.length() - 1; i >= 0; i--) {
            if (consoleText.charAt(i) == '>') {
                break;
            }
            lineReverse += consoleText.charAt(i);
        }

        for (int i = lineReverse.length() - 1; i >= 0; i--) {
            lineNormal += lineReverse.charAt(i);
        }

        return lineNormal;

    }

    private void comandos() {
        String line = parse();
        String[] argu = line.trim().split(" ");
        
        switch (argu[0].toLowerCase()) {
            case "mkdir" -> {
                if (argu.length == 1) {
                    print("\nIngrese el nombre del directorio a crear junto con el comando\n");
                    System.out.println("Se ejecutó comando");
                    break;
                }
                print(cmd.mkdir(cmd.getCurrentPath() + "/" + argu[1]));
            }

            case "mfile" -> {
                if (argu.length == 1) {
                    print("\nIngrese el nombre del archivo a crear junto con el comando\n");
                    System.out.println("Se ejecutó comando");
                    break;
                }
                print(cmd.Mfile(cmd.getCurrentPath() + "/" + argu[1]));
            }

            case "rm" -> {
                if (argu.length == 1) {
                    print("\nIngrese la carpeta o archivo a eliminar junto con el comando\n");
                    break;
                }

                File destino = new File(cmd.getCurrentPath() + "/" + argu[1]);
                print(cmd.eliminarCarpeta(destino));
                System.out.println("Se ejecutó comando");
            }

            case "cd" -> {
                if (argu.length == 1) {
                    print("Ingrese el directorio al que desea cambiar");
                    break;
                }
                cmd.CDBACK(argu[1]);
                System.out.println("Se ejecutó comando");
            }

            case "..." -> {
                cmd.CDBACK("..");
                System.out.println("Se ejecutó comando");
            }
            case "dir" -> {
                print(cmd.listar(cmd.getCurrentPath()));
                System.out.println("Se ejecutó comando");
            }

            case "date" ->{
                print(cmd.fecha());
                System.out.println("Se ejecutó comando");
            }
            case "time" ->{
                print(cmd.Time());
                System.out.println("Se ejecutó comando");
            }
            case "wr" -> {
                if (argu.length < 3) {
                    print("\nIngrese el comando, el archivo y el contenido que desea escribir separados por un espacio cada uno\n");
                    break;
                }

                String mensaje = "";

                for (int i = 2; i < argu.length; i++) {
                    mensaje += argu[i] + " ";
                }

                //System.out.println(cmd.getCurrentPath() + "/" + argu[1]);
                print(cmd.Escribir(mensaje, cmd.getCurrentPath() + "/" + argu[1]));
                System.out.println("Se ejecutó comando");
            }

            case "rd" -> {
                if (argu.length == 1) {
                    print("\nIngrese el archivo que desea leer junto con el comando\n");
                    
                    break;
                }

                print(cmd.Leer(cmd.getCurrentPath() + "/" + argu[1].trim()));
                System.out.println("Se ejecutó comando");
            }
            case "exit" ->
                dispose();

        }
    }

    private void consoleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consoleKeyPressed

        int[] codigosProhibidos = {27, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 19, 155, 127, 36, 33, 34, 35, 16, 38, 37, 40, 38, 39, 17, 18};

        for (int codigo : codigosProhibidos) {
            if (evt.getKeyCode() == codigo) {
                return;
            }
        }

        if (evt.getKeyCode() == 8) {
            String newText = console.getText();

            if (newText.charAt(newText.length() - 1) == '>') {
            } else {
                newText = newText.substring(0, newText.length() - 1);
                console.setText(newText);
            }

            return;

        } else if (evt.getKeyCode() == 10) {
            comandos();
            console.setText(console.getText() + "\n" + cmd.getCurrentPath() + ">");
            return;
        }

        String newText = console.getText();
        newText += evt.getKeyChar();
        console.setText(newText);
    }//GEN-LAST:event_consoleKeyPressed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(commandFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(commandFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(commandFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(commandFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new commandFrame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
